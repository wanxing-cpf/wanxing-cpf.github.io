<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>文件管理器</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .card { 
      margin-bottom: 20px; 
      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075); 
    }
    .file-list td { 
      vertical-align: middle; 
    }
    .storage-bar { 
      height: 25px; 
    }
    .navbar { 
      box-shadow: 0 2px 4px rgba(0,0,0,.1); 
    }
    .progress { 
      background-color: #e9ecef; 
    }
    .table-responsive { 
      max-height: 60vh; 
      overflow-y: auto; 
    }
    .file-name {
      max-width: 300px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .cursor-pointer {
      cursor: pointer;
    }
    .quota-info {
      font-size: 0.9rem;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
    <div class="container">
      <a class="navbar-brand" href="/">文件管理系统</a>
      <div class="navbar-collapse">
        <ul class="navbar-nav ms-auto">
          <% if (user.is_admin) { %>
            <li class="nav-item">
              <a class="nav-link" href="/admin/files">管理员面板</a>
            </li>
          <% } %>
          <li class="nav-item">
            <span class="navbar-text me-3">欢迎, <%= user.username %></span>
          </li>
          <li class="nav-item">
            <a class="btn btn-outline-light btn-sm" href="/logout">退出</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container">
    <h1 class="mb-4">文件管理器</h1>
    
    <!-- 存储空间使用情况 -->
    <div class="card mb-4">
      <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
        <span>存储空间</span>
        <small id="storage-percent">0%</small>
      </div>
      <div class="card-body">
        <div class="progress mb-2">
          <div id="storage-progress" class="progress-bar progress-bar-striped" 
               role="progressbar" style="width: 0%"></div>
        </div>
        <div class="quota-info d-flex justify-content-between">
          <span id="storage-text">正在加载存储信息...</span>
          <span id="storage-remaining" class="text-muted">剩余: 0 B</span>
        </div>
      </div>
    </div>
    
    <!-- 上传表单 -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">上传文件</div>
      <div class="card-body">
        <form id="upload-form" enctype="multipart/form-data">
          <div class="mb-3">
            <input class="form-control" type="file" name="file" id="file-input" required>
            <div class="form-text">最大文件大小: 200MB (您的配额: <span id="user-quota">2GB</span>)</div>
          </div>
          <button type="submit" class="btn btn-success">
            <span id="upload-button-text">上传</span>
            <span id="upload-spinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
          </button>
          <div id="upload-error" class="text-danger mt-2"></div>
        </form>
      </div>
    </div>

    <!-- 文件列表 -->
    <div class="card">
      <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
        <span>我的文件</span>
        <small id="file-count">0 个文件</small>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-striped table-hover mb-0">
            <thead class="table-light">
              <tr>
                <th>文件名</th>
                <th>大小</th>
                <th>上传时间</th>
                <th>操作</th>
              </tr>
            </thead>
            <tbody id="file-list">
              <tr>
                <td colspan="4" class="text-center text-muted py-3">正在加载文件列表...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="card-footer bg-light text-muted">
        <small>双击文件名可以快速下载</small>
      </div>
    </div>
  </div>

  <!-- 动态加载脚本 -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // 格式化文件大小
    function formatFileSize(bytes) {
      if (bytes < 1024) return bytes + ' B';
      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
      if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
      return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' GB';
    }
    
    // 更新存储信息
    async function updateStorageInfo() {
      try {
        const res = await fetch('/api/user/quota');
        if (!res.ok) throw new Error('获取存储信息失败');
        
        const data = await res.json();
        const progress = document.getElementById('storage-progress');
        const percentText = document.getElementById('storage-percent');
        const infoText = document.getElementById('storage-text');
        const remainingText = document.getElementById('storage-remaining');
        const quotaText = document.getElementById('user-quota');
        
        const percentage = Math.round((data.used / data.quota) * 100);
        progress.style.width = `${percentage}%`;
        percentText.textContent = `${percentage}%`;
        
        infoText.textContent = `已使用 ${formatFileSize(data.used)} / ${formatFileSize(data.quota)}`;
        remainingText.textContent = `剩余: ${formatFileSize(data.remaining)}`;
        quotaText.textContent = formatFileSize(data.quota);
        
        // 根据使用量改变进度条颜色
        progress.classList.remove('bg-success', 'bg-warning', 'bg-danger');
        if (percentage > 90) {
          progress.classList.add('bg-danger');
        } else if (percentage > 70) {
          progress.classList.add('bg-warning');
        } else {
          progress.classList.add('bg-success');
        }
      } catch (err) {
        console.error('获取存储信息失败:', err);
        document.getElementById('storage-text').textContent = '无法加载存储信息';
      }
    }
    
    // 加载文件列表
    async function loadFileList() {
      try {
        const res = await fetch('/api/files');
        if (!res.ok) throw new Error('加载文件列表失败');
        
        const files = await res.json();
        const tbody = document.getElementById('file-list');
        const fileCount = document.getElementById('file-count');
        
        if (files.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="4" class="text-center text-muted py-3">暂无文件，请上传您的第一个文件</td>
            </tr>
          `;
          fileCount.textContent = '0 个文件';
          return;
        }
        
        tbody.innerHTML = files.map(file => {
          const size = formatFileSize(file.size);
          const date = new Date(file.upload_time).toLocaleString();
          
          return `
            <tr data-id="${file.id}">
              <td class="file-name cursor-pointer" ondblclick="location.href='${file.url}'" 
                  title="${file.name}">
                ${file.name}
              </td>
              <td>${size}</td>
              <td>${date}</td>
              <td>
                <a href="${file.url}" class="btn btn-sm btn-primary">下载</a>
                <button class="btn btn-sm btn-danger delete-btn">
                  <span class="delete-text">删除</span>
                  <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                </button>
              </td>
            </tr>
          `;
        }).join('');
        
        fileCount.textContent = `${files.length} 个文件`;
      } catch (err) {
        console.error('加载文件列表失败:', err);
        document.getElementById('file-list').innerHTML = `
          <tr>
            <td colspan="4" class="text-center text-muted py-3">无法加载文件列表</td>
          </tr>
        `;
      }
    }
    
    // 文件上传
    document.getElementById('upload-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const fileInput = document.getElementById('file-input');
      const uploadError = document.getElementById('upload-error');
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const uploadText = document.getElementById('upload-button-text');
      const uploadSpinner = document.getElementById('upload-spinner');
      
      uploadError.textContent = '';
      
      if (fileInput.files.length === 0) {
        uploadError.textContent = '请选择文件';
        return;
      }
      
      const file = fileInput.files[0];
      const formData = new FormData();
      formData.append('file', file);
      
      try {
        submitBtn.disabled = true;
        uploadText.textContent = '上传中...';
        uploadSpinner.classList.remove('d-none');
        
        const res = await fetch('/upload', {
          method: 'POST',
          body: formData
        });
        
        if (res.ok) {
          await loadFileList();
          await updateStorageInfo();
          fileInput.value = '';
        } else {
          const error = await res.text();
          uploadError.textContent = error;
        }
      } catch (err) {
        console.error('上传失败:', err);
        uploadError.textContent = '上传失败: ' + err.message;
      } finally {
        submitBtn.disabled = false;
        uploadText.textContent = '上传';
        uploadSpinner.classList.add('d-none');
      }
    });
    
    // 删除文件
    document.addEventListener('click', async (e) => {
      if (e.target.classList.contains('delete-btn') || e.target.closest('.delete-btn')) {
        const btn = e.target.classList.contains('delete-btn') ? e.target : e.target.closest('.delete-btn');
        if (!confirm('确定要删除此文件吗？此操作不可恢复。')) return;
        
        const row = btn.closest('tr');
        const id = row.dataset.id;
        const deleteText = btn.querySelector('.delete-text');
        const spinner = btn.querySelector('.spinner-border');
        
        try {
          btn.disabled = true;
          deleteText.classList.add('d-none');
          spinner.classList.remove('d-none');
          
          const res = await fetch(`/delete/${id}`, { method: 'POST' });
          if (res.ok) {
            row.remove();
            await updateStorageInfo();
            // 更新文件计数
            const fileCount = document.getElementById('file-count');
            const count = document.querySelectorAll('#file-list tr').length;
            fileCount.textContent = `${count} 个文件`;
            
            // 如果删完了所有文件，显示空状态
            if (count === 0) {
              document.getElementById('file-list').innerHTML = `
                <tr>
                  <td colspan="4" class="text-center text-muted py-3">暂无文件，请上传您的第一个文件</td>
                </tr>
              `;
            }
          } else {
            throw new Error('删除失败');
          }
        } catch (err) {
          alert(err.message);
        } finally {
          if (btn) {
            btn.disabled = false;
            deleteText.classList.remove('d-none');
            spinner.classList.add('d-none');
          }
        }
      }
    });
    
    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      loadFileList();
      updateStorageInfo();
      // 每30秒更新一次存储信息
      setInterval(updateStorageInfo, 30000);
    });
  </script>
</body>
</html>